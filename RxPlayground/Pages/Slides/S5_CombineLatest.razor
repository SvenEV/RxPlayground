@using System.Reactive.Linq
@using System.Reactive.Subjects

<CodeSampleSlide Title="Combining Observables" Scenario="scenario">
    <UI>
        <button @onclick="@(() => subject?.OnNext("X"))">subject.OnNext("X")</button><br />
        <button @onclick="@(() => subject?.OnCompleted())">subject.OnCompleted()</button><br />
        <button @onclick="@(() => subject?.OnError(new InvalidOperationException()))">subject.OnError(new InvalidOperationException())</button>
    </UI>
</CodeSampleSlide>

@code {
    private RxScenario? scenario;
    private ISubject<string>? subject;

    protected override void OnInitialized()
    {
        scenario = RxScenario.Create(new[]
        {
            RxInstruction.DeclareObservable(out subject,
                new Subject<string>()
                    .Visualize("Subject")),

            RxInstruction.DeclareObservable(out var timer,
                Observable.Timer(TimeSpan.FromSeconds(3), TimeSpan.FromSeconds(3))
                    .Visualize("Timer")),

            RxInstruction.Blank(),

            RxInstruction.DeclareObservable(out var merged,
                Observable.Merge(
                    subject,
                    timer.Select(i => i.ToString())
                )
                .Visualize("Merge")),

            RxInstruction.Blank(),

            RxInstruction.Subscribe(null, merged),

            RxInstruction.Blank(),

            RxInstruction.DeclareObservable(out var combined,
                Observable.CombineLatest(
                    subject,
                    timer,
                    (str, number) => $"{str}{number}"
                )
                .Visualize("CombineLatest")),

            RxInstruction.Blank(),

            RxInstruction.Subscribe(null, combined),
        });
    }
}