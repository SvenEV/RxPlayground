@using System.Reactive.Linq
@using System.Reactive.Subjects

<CodeSampleSlide Title="Demo" Scenario="scenario">
    <UI>
        <button @onclick="@(() => subject?.OnNext("X"))">Trigger subject</button>
        <button @onclick="@(() => subject?.OnCompleted())">OnCompleted()</button>
        <button @onclick="@(() => subject?.OnError(new InvalidOperationException()))">OnError()</button>
    </UI>
</CodeSampleSlide>

@code {
    private RxScenario? scenario;
    private ISubject<string>? subject;
    private IDisposable? subscription1;
    private IDisposable? subscription2;

    protected override void OnInitialized()
    {
        scenario = RxScenario.Create(new[]
        {
            RxInstruction.DeclareObservable(out subject,
                new Subject<string>()
                    .Visualize("Subject")),

            RxInstruction.DeclareObservable(out var timer,
                Observable.Timer(TimeSpan.FromSeconds(3), TimeSpan.FromSeconds(3))
                    .Visualize("Timer")),

            RxInstruction.DeclareObservable(out var combined,
                Observable
                    .CombineLatest(
                        subject,
                        timer,
                        (str, number) => $"{str}{number}")
                    .Visualize("CombineLatest")
                    .Publish()
                    .Visualize("Publish")
                    .RefCount()
                    .Visualize("RefCount")),

            RxInstruction.Subscribe(d => subscription1 = d, combined, x => { }),

            RxInstruction.DeclareObservable(out var withFace,
                combined.Select(str => str + " :)").Visualize("Select")),

            RxInstruction.Subscribe(d => subscription2 = d, withFace, x => { }),

            RxInstruction.Unsubscribe(() => subscription2)
    });
    }
}