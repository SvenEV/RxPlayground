@implements IDisposable

<div class="rxp-canvas">
    <GraphView>
        @foreach (var node in state.Graph.Nodes)
        {
            <GraphNode Id="node.Key" Position="node.Value.Value.Position">@node.Value.Value</GraphNode>
        }

        @foreach (var edge in state.Graph.Edges)
        {
            @switch (edge.Value.Value)
            {
                case DataFlowEdge.StaticEdge staticEdge:
                    <GraphEdge Id="edge.Key" Source="edge.Value.Source" Target="edge.Value.Target" Color="#eee" Width="25" />
                    break;

                case DataFlowEdge.SubscriptionEdge subscriptionEdge:
                    <GraphEdge Id="edge.Key" Source="edge.Value.Source" Target="edge.Value.Target" ZIndex="1" Offset="((DataFlowEdgeId.SubscriptionEdgeId)edge.Key).VisualOffset">
                        @foreach (var emission in subscriptionEdge.Emissions)
                        {
                            <GraphEdgeToken Position="(float)((state.Timestamp - emission.Timestamp).TotalSeconds / RxInteractiveSession.TimelineLength.TotalSeconds)">
                                @switch (emission.Emission)
                                {
                                    case ObservableEmission.Next next:
                                        @(next.Value?.ToString() ?? "null")
                                        break;

                                    case ObservableEmission.Error error:
                                        @:💥
                                        break;

                                    case ObservableEmission.Completed:
                                        @:🔷
                                        break;
                                }
                            </GraphEdgeToken>
                        }
                    </GraphEdge>
                    break;
            }
        }
    </GraphView>
</div>

@code {
    private IDisposable? sessionSubscription;
    private RxInteractiveSessionState state = RxInteractiveSessionState.Empty;

    [Parameter]
    public RxInteractiveSession? Session { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        var oldSession = Session;

        await base.SetParametersAsync(parameters);

        if (Session != oldSession)
        {
            sessionSubscription?.Dispose();
            sessionSubscription = Session?.Subscribe(newState =>
            {
                state = newState;
                InvokeAsync(StateHasChanged);
            });
        }
    }

    public void Dispose() => sessionSubscription?.Dispose();
}