@implements IDisposable

<div class="rxp-canvas">
    <GraphView @ref="graphView">
        @foreach (var node in state.Graph.Nodes)
        {
            <GraphNode Id="node.Key" @key="node.Key"
                   Position="node.Value.Value.Position"
                   Size="node.Value.Value.Options.Size">@node.Value.Value</GraphNode>
        }

        @foreach (var edge in state.Graph.Edges)
        {
            @if (edge.Value.Value is DataFlowEdge.StaticEdge staticEdge)
            {
                var i = 0;

                <GraphEdge Id="edge.Key" @key="edge.Key" Source="edge.Value.Source" Target="edge.Value.Target" Color="#eee" Width="25" />

                @foreach (var subEdge in state.Graph.Edges
               .Where(e => e.Key is DataFlowEdgeId.SubscriptionEdgeId subEdgeId && subEdgeId.SourceId == edge.Value.Source && subEdgeId.TargetId == edge.Value.Target)
               .OrderBy(e => ((DataFlowEdgeId.SubscriptionEdgeId)e.Key).SequenceNumber))
                {
                    var subscriptionEdge = (DataFlowEdge.SubscriptionEdge)subEdge.Value.Value;

                    <GraphEdge Id="subEdge.Key" @key="subEdge.Key" Source="subEdge.Value.Source" Target="subEdge.Value.Target" ZIndex="1" Offset="(i % 2 * 2 - 1) * ((float)i / 2) * 20">
                        @foreach (var emission in subscriptionEdge.Emissions)
                        {
                            <GraphEdgeToken Position="(float)((state.Timestamp - emission.Timestamp).TotalSeconds / RxInteractiveSession.TimelineLength.TotalSeconds)">
                                @switch (emission.Emission)
                                {
                                    case ObservableEmission.Next next:
                                        @(next.Value?.ToString() ?? "null")
                                        break;

                                    case ObservableEmission.Error error:
                                        @:💥
                                        break;

                                    case ObservableEmission.Completed:
                                        @:🔷
                                        break;
                                }
                            </GraphEdgeToken>
                        }
                    </GraphEdge>

                    i++;
                }
            }
        }
    </GraphView>

    <label style="place-self: end start; margin-left: 4px; font-size: small;">
        <EditForm Model="this">
            <InputCheckbox @bind-Value="isZoomToFitEnabled" />
            Zoom to Fit
        </EditForm>
    </label>
</div>

@code {
    private GraphView? graphView;
    private IDisposable? sessionSubscription;
    private RxInteractiveSessionState state = RxInteractiveSessionState.Empty;
    private bool isZoomToFitEnabled = true;

    [Parameter]
    public RxInteractiveSession? Session { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        var oldSession = Session;

        await base.SetParametersAsync(parameters);

        if (Session != oldSession)
        {
            sessionSubscription?.Dispose();
            sessionSubscription = Session?.Subscribe(async newState =>
            {
                state = newState;
                if (graphView is not null && isZoomToFitEnabled)
                {
                    try
                    {
                        await graphView.ZoomToFitAsync();
                    }
                    catch
                    {
                    }
                }
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    public void Dispose() => sessionSubscription?.Dispose();
}