@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@inject DomHelper DomHelper

<div class="graph-view" @onpointerdown="OnPointerDown" @onpointerup="OnPointerUp" @onpointermove="OnPointerMove" @ref="element">
    <BECanvas @ref="canvas" Width="800" Height="600" />
    <div class="zero" style="--x: @(translation.X)px; --y: @(translation.Y)px" @onpointerdown:stopPropagation>
        <CascadingValue Value="this">
            @ChildContent
        </CascadingValue>
    </div>
</div>

@code {
    private Vector2 translation;
    private DragOperation? dragOperation;
    private ElementReference element;

    private Dictionary<object, GraphNode> nodes = new();
    private Dictionary<object, GraphEdge> edges = new();

    private BECanvasComponent? canvas;
    private Canvas2DContext? canvasContext;

    private record DragOperation(
        Vector2 OriginalTranslation,
        Vector2 PointerDownPosition);

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        canvasContext = await canvas!.CreateCanvas2DAsync();
        await canvasContext.BeginBatchAsync();
        await canvasContext.SetTransformAsync(1, 0, 0, 1, 0, 0);
        await canvasContext.ClearRectAsync(0, 0, canvas!.Width, canvas.Height);
        await canvasContext.TranslateAsync(canvas.Width / 2 + translation.X, canvas.Height / 2 + translation.Y);

        foreach (var edge in edges.Values.OrderBy(e => e.ZIndex))
        {
            await edge.DrawAsync(canvasContext);
        }
        
        await canvasContext.EndBatchAsync();
    }

    private async Task OnPointerDown(PointerEventArgs args)
    {
        if (args.IsPrimary)
        {
            dragOperation = new(translation, new((float)args.OffsetX, (float)args.OffsetY));
            await DomHelper.SetPointerCaptureAsync(element, args.PointerId);
        }
    }

    private async Task OnPointerUp(PointerEventArgs args)
    {
        if (args.IsPrimary && dragOperation is not null)
        {
            var offset = new Vector2((float)args.OffsetX, (float)args.OffsetY);
            translation = dragOperation.OriginalTranslation + (offset - dragOperation.PointerDownPosition);
            dragOperation = null;
            await DomHelper.ReleasePointerCaptureAsync(element, args.PointerId);
        }
    }

    private void OnPointerMove(PointerEventArgs args)
    {
        if (args.IsPrimary && dragOperation is not null)
        {
            var offset = new Vector2((float)args.OffsetX, (float)args.OffsetY);
            translation = dragOperation.OriginalTranslation + (offset - dragOperation.PointerDownPosition);
        }
    }

    public void AddNode(object id, GraphNode node)
    {
        nodes.Add(id, node);
    }

    public void RemoveNode(object id)
    {
        nodes.Remove(id);
    }

    public GraphNode? GetNode(object? id)
    {
        return id is not null && nodes.TryGetValue(id, out var node) ? node : null;
    }

    public void AddEdge(object id, GraphEdge edge)
    {
        edges[id] = edge;//.Add(id, edge);
    }

    public void RemoveEdge(object id)
    {
        edges.Remove(id);
    }
}