@inject DomHelper DomHelper

<div class="graph-view" @onpointerdown="OnPointerDown" @onpointerup="OnPointerUp" @onpointermove="OnPointerMove" @ref="element" @onwheel="OnMouseWheel">

    <svg style="@css">
        @foreach (var edge in edges.Values.OrderBy(e => e.ZIndex))
        {
            var source = GetNode(edge.Source);
            var target = GetNode(edge.Target);

            @if (source is not null && target is not null)
            {
                var orthogonal = Vector2.Normalize(new Vector2(target.Position.Y - source.Position.Y, target.Position.X - source.Position.X));
                var sourcePositionWithOffset = source.Position + edge.Offset * orthogonal;
                var targetPositionWithOffset = target.Position + edge.Offset * orthogonal;

                <line x1="@sourcePositionWithOffset.X"
              y1="@sourcePositionWithOffset.Y"
              x2="@targetPositionWithOffset.X"
              y2="@targetPositionWithOffset.Y"
              stroke="@edge.Color"
              stroke-width="@edge.Width" />
            }
        }
    </svg>

    <div class="zero" style="@css" @onpointerdown:stopPropagation>
        <CascadingValue Value="this">
            @ChildContent
        </CascadingValue>
    </div>

</div>

@code {
    private Vector2 translation;
    private double scale = 1;

    private DragOperation? dragOperation;
    private ElementReference element;

    private Dictionary<object, GraphNode> nodes = new();
    private Dictionary<object, GraphEdge> edges = new();

    private string css => FormattableString.Invariant($"--x: {translation.X}px; --y: {translation.Y}px; --scale: {scale}");

    private record DragOperation(
        Vector2 OriginalTranslation,
        Vector2 PointerDownPosition);

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private void OnMouseWheel(WheelEventArgs args)
    {
        if (dragOperation is not null)
            return;

        var delta = -args.DeltaY / 1000;
        scale = (scale * (1 + delta));
    }

    private async Task OnPointerDown(PointerEventArgs args)
    {
        if (args.IsPrimary)
        {
            dragOperation = new(translation, new Vector2((float)args.OffsetX, (float)args.OffsetY) / (float)scale);
            await DomHelper.SetPointerCaptureAsync(element, args.PointerId);
        }
    }

    private async Task OnPointerUp(PointerEventArgs args)
    {
        if (args.IsPrimary && dragOperation is not null)
        {
            var offset = new Vector2((float)args.OffsetX, (float)args.OffsetY) / (float)scale;
            translation = dragOperation.OriginalTranslation + (offset - dragOperation.PointerDownPosition);
            dragOperation = null;
            await DomHelper.ReleasePointerCaptureAsync(element, args.PointerId);
        }
    }

    private void OnPointerMove(PointerEventArgs args)
    {
        if (args.IsPrimary && dragOperation is not null)
        {
            var offset = new Vector2((float)args.OffsetX, (float)args.OffsetY) / (float)scale;
            translation = dragOperation.OriginalTranslation + (offset - dragOperation.PointerDownPosition);
        }
    }

    public void AddNode(object id, GraphNode node)
    {
        nodes.Add(id, node);
    }

    public void RemoveNode(object id)
    {
        nodes.Remove(id);
    }

    public GraphNode? GetNode(object? id)
    {
        return id is not null && nodes.TryGetValue(id, out var node) ? node : null;
    }

    public void AddEdge(object id, GraphEdge edge)
    {
        edges[id] = edge;//.Add(id, edge);
    }

    public void RemoveEdge(object id)
    {
        edges.Remove(id);
    }
}