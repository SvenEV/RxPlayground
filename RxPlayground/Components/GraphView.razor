@using System.Diagnostics
@inject DomHelper DomHelper

<div class="graph-view" @onpointerdown="OnPointerDown" @onpointerup="OnPointerUp" @onpointermove="OnPointerMove" @ref="element" @onwheel="OnMouseWheel">

    <svg style="@css">
        @foreach (var edge in edges.Values.OrderBy(e => e.ZIndex))
        {
            var source = GetNode(edge.Source);
            var target = GetNode(edge.Target);

            @if (source is not null && target is not null)
            {
                var orthogonal = Vector2.Normalize(new Vector2(target.Position.Y - source.Position.Y, target.Position.X - source.Position.X));
                var sourcePositionWithOffset = source.Position + edge.Offset * orthogonal;
                var targetPositionWithOffset = target.Position + edge.Offset * orthogonal;

                <line x1="@sourcePositionWithOffset.X"
              y1="@sourcePositionWithOffset.Y"
              x2="@targetPositionWithOffset.X"
              y2="@targetPositionWithOffset.Y"
              stroke="@edge.Color"
              stroke-width="@edge.Width" />
            }
        }
    </svg>

    <div class="zero" style="@css" @onpointerdown:stopPropagation>
        <CascadingValue Value="this">
            @ChildContent
        </CascadingValue>
    </div>

</div>

@code {
    private Vector2 translationCurrent;
    private Vector2 translationTarget;
    private double scaleCurrent = 1;
    private double scaleTarget = 1;

    private DragOperation? dragOperation;
    private ElementReference element;
    private CancellationTokenSource animateCancellation = new();

    private Dictionary<object, GraphNode> nodes = new();
    private Dictionary<object, GraphEdge> edges = new();

    private string css => FormattableString.Invariant($"--x: {translationCurrent.X}px; --y: {translationCurrent.Y}px; --scale: {scaleCurrent}");

    private record DragOperation(
        Vector2 OriginalTranslation,
        Vector2 PointerDownPosition);

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override void OnInitialized()
    {
        AnimateViewportChanges();
    }

    private async void AnimateViewportChanges()
    {
        var stopwatch = Stopwatch.StartNew();
        var lastFrameTime = 0f;

        while (!animateCancellation.IsCancellationRequested)
        {
            translationCurrent = Vector2.Lerp(translationCurrent, translationTarget, 4 * lastFrameTime);
            scaleCurrent = Vector2.Lerp((float)scaleCurrent * Vector2.One, (float)scaleTarget * Vector2.One, 4 * lastFrameTime).X;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(33);
            lastFrameTime = (float)stopwatch.Elapsed.TotalSeconds;
            stopwatch.Restart();
        }
    }

    private void OnMouseWheel(WheelEventArgs args)
    {
        if (dragOperation is not null)
            return;

        var delta = -args.DeltaY / 1000;
        scaleTarget = (scaleTarget * (1 + delta));
    }

    private async Task OnPointerDown(PointerEventArgs args)
    {
        if (args.IsPrimary)
        {
            dragOperation = new(translationTarget, new Vector2((float)args.OffsetX, (float)args.OffsetY) / (float)scaleTarget);
            await DomHelper.SetPointerCaptureAsync(element, args.PointerId);
        }
    }

    private async Task OnPointerUp(PointerEventArgs args)
    {
        if (args.IsPrimary && dragOperation is not null)
        {
            var offset = new Vector2((float)args.OffsetX, (float)args.OffsetY) / (float)scaleTarget;
            translationTarget = dragOperation.OriginalTranslation + (offset - dragOperation.PointerDownPosition);
            translationCurrent = translationTarget; // avoid animation while panning
            dragOperation = null;
            await DomHelper.ReleasePointerCaptureAsync(element, args.PointerId);
        }
    }

    private void OnPointerMove(PointerEventArgs args)
    {
        if (args.IsPrimary && dragOperation is not null)
        {
            var offset = new Vector2((float)args.OffsetX, (float)args.OffsetY) / (float)scaleTarget;
            translationTarget = dragOperation.OriginalTranslation + (offset - dragOperation.PointerDownPosition);
            translationCurrent = translationTarget; // avoid animation while panning
        }
    }

    public async Task ZoomToFitAsync(float padding = 20)
    {
        var min = nodes.Values.Select(n => n.Position - (n.Size / 2) * Vector2.One).Aggregate(Vector2.Zero, Vector2.Min) - padding * Vector2.One;
        var max = nodes.Values.Select(n => n.Position + (n.Size / 2) * Vector2.One).Aggregate(Vector2.Zero, Vector2.Max) + padding * Vector2.One;
        var size = max - min;

        translationTarget = -(min + size / 2);

        if (!Equals(element, default))
        {
            var viewSize = await DomHelper.GetElementSizeAsync(element);
            var scale = Vector2.Min(Vector2.One, viewSize / size);
            scaleTarget = Math.Min(scale.X, scale.Y);
        }

        await InvokeAsync(StateHasChanged);
    }

    public void AddNode(object id, GraphNode node)
    {
        nodes.Add(id, node);
    }

    public void RemoveNode(object id)
    {
        nodes.Remove(id);
    }

    public GraphNode? GetNode(object? id)
    {
        return id is not null && nodes.TryGetValue(id, out var node) ? node : null;
    }

    public void AddEdge(object id, GraphEdge edge)
    {
        edges[id] = edge;//.Add(id, edge);
    }

    public void RemoveEdge(object id)
    {
        edges.Remove(id);
    }
}