@implements IDisposable

<div class="rxp-canvas">
    <GraphView>
        @foreach (var node in state.Graph.Nodes)
        {
            <GraphNode Id="node.Key" Position="node.Value.Value.Position">@node.Value.Value</GraphNode>
        }

        @foreach (var edge in state.Graph.Edges)
        {
            <GraphEdge Id="edge.Key" Source="edge.Value.Source" Target="edge.Value.Target">
                @foreach (var emission in edge.Value.Value.Emissions)
                {
                    <GraphEdgeToken Position="(float)((state.Timestamp - emission.Timestamp).TotalSeconds / RxInteractiveSession.TimelineLength.TotalSeconds)">
                        @switch (emission.Emission)
                        {
                            case ObservableEmission.Next next:
                                @(next.Value?.ToString() ?? "null")
                                break;

                            case ObservableEmission.Error error:
                                @:💥
                                break;

                            case ObservableEmission.Completed:
                                @:🔷
                                break;
                        }
                    </GraphEdgeToken>
                }
            </GraphEdge>
        }
    </GraphView>

    <div class="debug-view">
        <p>Timestamp: @state.Timestamp.ToString("O")</p>

        <p>Nodes:</p>
        <ul>
            @foreach (var node in state.Graph.Nodes)
            {
                <li>[@node.Key] @node.Value.Value</li>
            }
        </ul>

        <p>Edges:</p>
        <ul>
            @foreach (var edge in state.Graph.Edges)
            {
                <li>
                    [@edge.Key] @edge.Value.Value (@edge.Value.Source → @edge.Value.Target)
                    <ul>
                        @foreach (var emission in edge.Value.Value.Emissions)
                        {
                            <li>@emission.Timestamp.ToString("O") - @((float)((state.Timestamp - emission.Timestamp).TotalSeconds / RxInteractiveSession.TimelineLength.TotalSeconds))</li>
                        }
                    </ul>
                </li>
            }
        </ul>
    </div>
</div>

@code {
    private IDisposable? sessionSubscription;
    private RxInteractiveSessionState state = RxInteractiveSessionState.Empty;

    [Parameter]
    public RxInteractiveSession? Session { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        var oldSession = Session;

        await base.SetParametersAsync(parameters);

        if (Session != oldSession)
        {
            sessionSubscription?.Dispose();
            sessionSubscription = Session?.Subscribe(newState =>
            {
                state = newState;
                InvokeAsync(StateHasChanged);
            });
        }
    }

    public void Dispose() => sessionSubscription?.Dispose();
}